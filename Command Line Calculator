import math
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--type", type=str)
parser.add_argument("--payment", type=float)
parser.add_argument("--principal", type=float)
parser.add_argument("--periods", type=float)
parser.add_argument("--interest", type=float)
args = parser.parse_args()

def p():
  try:
    rate = args.interest / (12 * 100)
    credit_principal = math.ceil(args.payment / ((rate * (1 + rate)**args.periods) / ((1 + rate)**args.periods - 1)))
    overpay = math.ceil((args.payment * args.periods) - credit_principal)
    return(f"Your credit principal is {credit_principal} \n Overpay: {overpay}")
  except TypeError:
    print("Incorrect parameters.")
def a():
  try:
    rate = args.interest / (12 * 100)
    annuity = math.ceil(args.principal * ((rate * (1 + rate)**args.periods) / ((1 + rate)**args.periods - 1)))
    overpay = math.ceil((annuity * args.periods) - args.principal)
    return(f"Your annuity payment is {annuity} \n Overpay: {overpay}")
  except TypeError:
    print("Incorrect parameters.")
def d():
  try:
    rate = args.interest / (12 * 100)
    number = 0
    diff_tot=0
    while number < args.periods:
      number +=1
      diff = math.ceil((args.principal / args.periods) + rate * (args.principal - (args.principal * (number - 1) / args.periods)))
      diff_tot +=diff
      overpay = math.ceil(diff_tot - args.principal)
      print(f"Month {number}: paid out {diff}")
    return(f"Overpay: {overpay}")
  except TypeError:
    print("Incorrect parameters.")
def n():
  try:
    rate = args.interest / (12 * 100)
    log = math.log(args.payment / (args.payment - rate * args.principal), 1 + rate)
    true_log = math.ceil(log)
    cost = args.payment * true_log
    overpay = math.ceil(cost - args.principal)
    if true_log == 12:
        return("You need 1 year to repay this credit \n Overpay: {overpay}")
    elif true_log < 12:
        return(f"You need {true_log} months to repay this credit \n Overpay: {overpay}")
    elif true_log > 12:
        years = int(true_log / 12)
        months = true_log % 12
        return(f"You need {years} years and {months} months to pay off this credit \n Overpay: {overpay}")
  except TypeError:
    print("Incorrect parameters.")
       
if args.type == "diff":
  print(d())
elif args.type == "annuity":
  if args.payment and args.periods:
    print(p())
  elif args.principal and args.periods:
    print(a())
  elif args.principal and args.payment:
    print(n())


